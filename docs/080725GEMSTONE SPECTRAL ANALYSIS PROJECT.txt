GEMSTONE SPECTRAL ANALYSIS PROJECT - CONCISE SUMMARY
Core Project
Multi-spectral gemstone identification system using structural wavelength markers to distinguish natural vs synthetic stones. Analyzes unknown stones against reference database using direct wavelength matching.

Key Discovery
Natural sapphires show "pre-mound structures" (plateaus/small mounds) before main spectral mound, while synthetics have clean spectra with no pre-structures.

Database Structure
SQLite database with spectral_data, stone_catalog, structural_features tables
Stone ID format: [StoneNumber][LightSource][Orientation][ScanNumber]
Example: 583BP2 = Stone 583, Broadband, Pavilion, Scan 2
Light sources: B(roadband), L(aser), U(V)
Reference stones: 58BC1 (Natural), 60BP3 (Synthetic)
Core Programs
analyzer.py - Main analysis engine for unknown stones
database/db_manager.py - MultiSpectralGemstoneDB class
Direct wavelength matching - Simple numerical comparison vs complex algorithms
Visualization suite - Feature plots and spectral curves
Current Issue Being Fixed
Analyzer was returning self-matches (583BP2 matching itself as #1). Implementing direct wavelength matching with self-exclusion to fix ordering problems.

Tolerances
Peaks: ±1 nm (precise)
Mounds/Plateaus: ±7 nm (broad features)
Valleys/Troughs: ±3 nm
File Structure
project/
├── analyzer.py (main analysis)
├── database/db_manager.py
├── structural/ (CSV feature files)
├── visualization/ (plotting modules)
└── config/settings.py
Methodology
Load unknown stone CSV features
Extract stone reference (583 from 583BP2)
Query database excluding self-matches
Direct wavelength comparison: abs(unknown_wl - db_wl)
Score within tolerance: 100% at 0nm diff, 0% at tolerance limit
Rank by match percentage, then by total wavelength difference
Current Debug Status
Working on standalone test to identify why direct wavelength matching returns same results as old system. Suspect database query or self-exclusion logic issue.

