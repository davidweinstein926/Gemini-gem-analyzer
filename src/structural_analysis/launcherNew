# gemini_launcher.py - FULL FUNCTIONALITY WITH IMPROVED PATH RESOLUTION
import tkinter as tk
from tkinter import messagebox, ttk
import sys
import os
import subprocess
from datetime import datetime
from pathlib import Path

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import data path configuration if available
try:
    from data_path_config import gemini_paths, setup_project_paths
    HAS_PATH_CONFIG = True
    print("‚úÖ Data path configuration available")
except ImportError:
    HAS_PATH_CONFIG = False
    print("‚ö†Ô∏è  Data path configuration not available - using manual path resolution")

class GeminiLauncher:
    """Gemini launcher with logical workflow: Numerical ‚Üí gemini1.py, Structural ‚Üí Manual/Auto ‚Üí Light Source"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Gemini Analyzer - FULL FUNCTIONALITY + IMPROVED PATHS")
        self.root.geometry("600x750")  # Increased height to fit all sections
        self.root.resizable(True, True)
        self.root.minsize(600, 750)  # Minimum size to prevent cutoff
        
        # Get paths and setup data configuration
        self.script_dir = Path(__file__).parent.absolute()
        print(f"Launcher directory: {self.script_dir}")
        
        # Setup data paths if configuration is available
        if HAS_PATH_CONFIG:
            setup_project_paths()
            print(f"‚úÖ Project paths configured - Raw data: {gemini_paths.raw_data}")
        
        # STEP 1: Primary analysis choice
        self.primary_analysis = {
            "numerical": ("Numerical Analysis", "Gem identification using gemini1.py database matching"),
            "structural": ("Structural Analysis", "Feature detection and marking (manual or automated)")
        }
        
        # STEP 2: Structural analysis method (only shown if structural selected)
        self.structural_methods = {
            "manual": ("Manual Marking", "Interactive point-and-click feature marking"),
            "auto": ("Automated Detection", "Computational feature detection algorithms")
        }
        
        # STEP 3: Light sources (only shown if structural selected)
        self.light_sources = {
            "bh": ("B/H (Halogen)", "Broad mounds, plateaus, mineral identification"),
            "l": ("L (Laser)", "Sharp features, natural/synthetic detection"),
            "u": ("U (UV)", "Electronic transitions, color centers")
        }
        
        # COMPREHENSIVE FILE MAPPINGS - RESTORED ORIGINAL FUNCTIONALITY
        self.file_mappings = {
            "numerical": {
                # Numerical analysis always launches gemini1.py
                "paths": [
                    "../numerical_analysis/gemini1.py",
                    "../../numerical_analysis/gemini1.py", 
                    "numerical_analysis/gemini1.py",
                    "../src/numerical_analysis/gemini1.py",
                    "../../src/numerical_analysis/gemini1.py",
                    "gemini1.py"  # Direct in current dir
                ],
                "name": "Gemini Identification System"
            },
            "structural": {
                "manual": {
                    "bh": {
                        "paths": [
                            "manual_analyzers/gemini_halogen_analyzer.py",
                            "../manual_analyzers/gemini_halogen_analyzer.py",
                            "../../manual_analyzers/gemini_halogen_analyzer.py",
                            "../structural_analysis/manual_analyzers/gemini_halogen_analyzer.py",
                            "gemini_halogen_analyzer.py"
                        ],
                        "name": "Manual Halogen Analyzer"
                    },
                    "l": {
                        "paths": [
                            "manual_analyzers/gemini_laser_analyzer.py",
                            "../manual_analyzers/gemini_laser_analyzer.py",
                            "../../manual_analyzers/gemini_laser_analyzer.py",
                            "../structural_analysis/manual_analyzers/gemini_laser_analyzer.py",
                            "gemini_laser_analyzer.py"
                        ],
                        "name": "Manual Laser Analyzer"
                    },
                    "u": {
                        "paths": [
                            "manual_analyzers/gemini_uv_analyzer.py",
                            "../manual_analyzers/gemini_uv_analyzer.py",
                            "../../manual_analyzers/gemini_uv_analyzer.py", 
                            "../structural_analysis/manual_analyzers/gemini_uv_analyzer.py",
                            "gemini_uv_analyzer.py"
                        ],
                        "name": "Manual UV Analyzer"
                    }
                },
                "auto": {
                    "bh": {
                        "paths": [
                            "auto_analysis/b_spectra_auto_detector.py",
                            "../auto_analysis/b_spectra_auto_detector.py",
                            "../../auto_analysis/b_spectra_auto_detector.py",
                            "../structural_analysis/auto_analysis/b_spectra_auto_detector.py",
                            "b_spectra_auto_detector.py"
                        ],
                        "name": "B Spectra Auto Detector"
                    },
                    "l": {
                        "paths": [
                            "auto_analysis/l_spectra_auto_detector.py",
                            "../auto_analysis/l_spectra_auto_detector.py", 
                            "../../auto_analysis/l_spectra_auto_detector.py",
                            "../structural_analysis/auto_analysis/l_spectra_auto_detector.py",
                            "l_spectra_auto_detector.py"
                        ],
                        "name": "L Spectra Auto Detector"
                    },
                    "u": {
                        "paths": [
                            "auto_analysis/gemini_peak_detector.py",
                            "../auto_analysis/gemini_peak_detector.py",
                            "../../auto_analysis/gemini_peak_detector.py", 
                            "../structural_analysis/auto_analysis/gemini_peak_detector.py",
                            "gemini_peak_detector.py"
                        ],
                        "name": "UV Peak Detector"
                    }
                }
            }
        }
        
        # Setup interface
        self.center_window()
        self.create_interface()
        
    def center_window(self):
        """Center window on screen"""
        self.root.update_idletasks()
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width // 2) - (600 // 2)
        y = (screen_height // 2) - (750 // 2)
        self.root.geometry(f"600x750+{x}+{y}")
        print(f"Window sized for full visibility: 600x750")
        
    def create_interface(self):
        """Create logical workflow interface"""
        # Title - COMPACT
        title_frame = tk.Frame(self.root, bg='darkblue')
        title_frame.pack(fill='x', pady=(0, 10))
        
        tk.Label(title_frame, text="GEMINI GEMOLOGICAL ANALYZER", 
                font=('Arial', 16, 'bold'), fg='white', bg='darkblue').pack(pady=8)
        tk.Label(title_frame, text="Logical Workflow: Numerical ‚Üí Structural ‚Üí Manual/Auto ‚Üí Light Source", 
                font=('Arial', 9), fg='lightblue', bg='darkblue').pack()
        
        # Data path status if available
        if HAS_PATH_CONFIG:
            status_text = f"‚úÖ Data paths configured - Raw data: {len(gemini_paths.get_raw_data_files())} files"
        else:
            status_text = "‚ö†Ô∏è  Manual path resolution mode"
        tk.Label(title_frame, text=status_text, 
                font=('Arial', 8), fg='lightyellow', bg='darkblue').pack()
        
        # Button frame at bottom first
        self.button_frame = tk.Frame(self.root, bg='lightgray', relief='raised', bd=2)
        self.button_frame.pack(fill='x', side='bottom', pady=10)
        self.create_buttons()
        
        # Main content frame
        main_frame = tk.Frame(self.root)
        main_frame.pack(fill='both', expand=True, padx=20)
        
        # STEP 1: Primary Analysis Type
        self.create_primary_selection(main_frame)
        
        # STEP 2: Structural Method Selection (initially hidden)
        self.structural_frame = tk.LabelFrame(main_frame, text="Step 2: Structural Analysis Method", 
                                            font=('Arial', 11, 'bold'), padx=8, pady=8)
        # Don't pack initially - will be shown when structural is selected
        
        self.structural_method_var = tk.StringVar(value="auto")
        self.create_structural_method_options()
        
        # STEP 3: Light Source Selection (initially hidden)  
        self.light_frame = tk.LabelFrame(main_frame, text="Step 3: Light Source Selection", 
                                       font=('Arial', 11, 'bold'), padx=8, pady=8)
        # Don't pack initially
        
        self.light_source_var = tk.StringVar(value="bh")
        self.create_light_source_options()
        
        # Info section
        self.create_info_section(main_frame)
        
    def create_primary_selection(self, parent):
        """Create Step 1: Primary analysis type selection - COMPACT"""
        frame = tk.LabelFrame(parent, text="Step 1: Select Analysis Type", 
                             font=('Arial', 11, 'bold'), padx=8, pady=8)
        frame.pack(fill='x', pady=(0, 8))
        
        self.primary_var = tk.StringVar(value="numerical")
        
        for key, (name, description) in self.primary_analysis.items():
            option_frame = tk.Frame(frame)
            option_frame.pack(fill='x', pady=3)
            
            icon = "üî¢" if key == "numerical" else "üî¨"
            color = "darkgreen" if key == "numerical" else "darkblue"
            
            tk.Radiobutton(option_frame, text=f"{icon} {name}", 
                          variable=self.primary_var, value=key,
                          font=('Arial', 10, 'bold'), fg=color,
                          command=self.update_workflow).pack(anchor='w')
            tk.Label(option_frame, text=f"   {description}", 
                    font=('Arial', 8), fg='gray').pack(anchor='w')
    
    def create_structural_method_options(self):
        """Create Step 2: Structural method options - COMPACT"""
        for key, (name, description) in self.structural_methods.items():
            option_frame = tk.Frame(self.structural_frame)
            option_frame.pack(fill='x', pady=3)
            
            icon = "üéØ" if key == "manual" else "ü§ñ"
            color = "darkgreen" if key == "manual" else "darkred"
            
            tk.Radiobutton(option_frame, text=f"{icon} {name}", 
                          variable=self.structural_method_var, value=key,
                          font=('Arial', 10, 'bold'), fg=color,
                          command=self.update_workflow).pack(anchor='w')
            tk.Label(option_frame, text=f"   {description}", 
                    font=('Arial', 8), fg='gray').pack(anchor='w')
    
    def create_light_source_options(self):
        """Create Step 3: Light source options - COMPACT"""
        for key, (name, description) in self.light_sources.items():
            option_frame = tk.Frame(self.light_frame)
            option_frame.pack(fill='x', pady=3)
            
            icons = {"bh": "üî•", "l": "‚ö°", "u": "üü£"}
            colors = {"bh": "red", "l": "blue", "u": "purple"}
            
            tk.Radiobutton(option_frame, text=f"{icons[key]} {name}", 
                          variable=self.light_source_var, value=key,
                          font=('Arial', 10, 'bold'), fg=colors[key],
                          command=self.update_workflow).pack(anchor='w')
            tk.Label(option_frame, text=f"   {description}", 
                    font=('Arial', 8), fg='gray').pack(anchor='w')
    
    def create_info_section(self, parent):
        """Create compact info section"""
        self.info_frame = tk.LabelFrame(parent, text="Configuration Summary", 
                                       font=('Arial', 11, 'bold'), padx=10, pady=10)
        self.info_frame.pack(fill='both', expand=True, pady=(10, 10))
        
        text_frame = tk.Frame(self.info_frame)
        text_frame.pack(fill='both', expand=True)
        
        # Reduced height to make room for workflow steps
        self.info_text = tk.Text(text_frame, height=5, width=60, font=('Arial', 8), 
                                wrap='word', bg='lightyellow', relief='sunken', bd=1)
        
        scrollbar = tk.Scrollbar(text_frame, command=self.info_text.yview)
        self.info_text.config(yscrollcommand=scrollbar.set)
        
        self.info_text.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        self.update_workflow()
    
    def create_buttons(self):
        """Create button controls with dynamic visibility status"""
        # Dynamic status indicator - will be updated by update_workflow
        self.status_label = tk.Label(self.button_frame, text="‚ñº LOADING... ‚ñº", 
                                    font=('Arial', 8, 'bold'), fg='darkblue', bg='lightgray')
        self.status_label.pack(pady=(2,0))
        
        button_container = tk.Frame(self.button_frame, bg='lightgray')
        button_container.pack(fill='x', pady=5)
        
        # Main launch button
        self.launch_btn = tk.Button(button_container, text="üöÄ LAUNCH ANALYZER", 
                                   font=('Arial', 14, 'bold'), 
                                   bg="green", fg="white", 
                                   command=self.launch_analyzer, 
                                   padx=40, pady=12)
        self.launch_btn.pack(side='left', padx=10)
        
        # Other buttons - RESTORED ALL ORIGINAL FUNCTIONALITY
        tk.Button(button_container, text="üîÑ Reset", 
                 font=('Arial', 10), bg="lightyellow", fg="black", 
                 command=self.reset_selections, padx=15, pady=8).pack(side='left', padx=5)
        
        tk.Button(button_container, text="üìÅ Browse Files", 
                 font=('Arial', 10), bg="lightgreen", fg="black", 
                 command=self.browse_files, padx=15, pady=8).pack(side='left', padx=5)
        
        tk.Button(button_container, text="‚ùì Help", 
                 font=('Arial', 10), bg="lightblue", fg="black", 
                 command=self.show_help, padx=15, pady=8).pack(side='right', padx=10)
        
        tk.Button(button_container, text="‚ùå Exit", 
                 font=('Arial', 10), bg="lightcoral", fg="black", 
                 command=self.root.quit, padx=15, pady=8).pack(side='right', padx=5)
    
    def update_workflow(self):
        """Update the workflow display based on selections"""
        primary_choice = self.primary_var.get()
        
        # Show/hide workflow steps based on primary choice
        if primary_choice == "numerical":
            # Hide structural options for numerical analysis
            self.structural_frame.pack_forget()
            self.light_frame.pack_forget()
            print("Workflow: Numerical mode - Steps 2&3 hidden")
            
            # Update status label
            if hasattr(self, 'status_label'):
                self.status_label.config(text="‚ñº NUMERICAL MODE: Only Step 1 Needed ‚ñº")
            
        else:  # structural
            # Show structural method selection with compact spacing
            self.structural_frame.pack(fill='x', pady=(0, 8))
            # Always show light source for structural analysis with compact spacing  
            self.light_frame.pack(fill='x', pady=(0, 8))
            print("Workflow: Structural mode - Steps 2&3 visible, including LIGHT SOURCE")
            
            # Update status label
            if hasattr(self, 'status_label'):
                self.status_label.config(text="‚ñº ALL SECTIONS VISIBLE: Steps 1, 2 (Method), 3 (Light Source) ‚ñº")
        
        # Update info display
        self.update_info_display()
    
    def update_info_display(self):
        """Update the configuration summary"""
        self.info_text.config(state='normal')
        self.info_text.delete(1.0, tk.END)
        
        primary_choice = self.primary_var.get()
        
        info_lines = []
        info_lines.append("WORKFLOW SUMMARY:")
        info_lines.append("=" * 40)
        
        if primary_choice == "numerical":
            info_lines.append("‚úÖ Step 1: Numerical Analysis")
            
            # Get file info
            paths = self.file_mappings["numerical"]["paths"]
            name = self.file_mappings["numerical"]["name"]
            found_file = self.find_file_from_paths(paths)
            
            info_lines.append("‚Üí Will launch: Gemini Identification System")
            if found_file:
                info_lines.append("‚Üí File Status: ‚úÖ FOUND")
                info_lines.append(f"‚Üí Location: {found_file}")
            else:
                info_lines.append("‚Üí File Status: ‚ùå MISSING")
            
            info_lines.append("")
            info_lines.append("DESCRIPTION:")
            info_lines.append("‚Ä¢ Raw spectrum to unknown format conversion")
            info_lines.append("‚Ä¢ Database matching against reference spectra") 
            info_lines.append("‚Ä¢ Gem identification with confidence scores")
            info_lines.append("‚Ä¢ Comparison plots and detailed results")
            info_lines.append("")
            
            if HAS_PATH_CONFIG:
                raw_files = gemini_paths.get_raw_data_files()
                info_lines.append("DATA STATUS:")
                info_lines.append(f"‚Ä¢ Raw data directory: {len(raw_files)} files found")
                info_lines.append(f"‚Ä¢ Location: {gemini_paths.raw_data}")
            else:
                info_lines.append("WORKFLOW:")
                info_lines.append("1. Put raw files in: src/numerical_analysis/raw_txt/")
                info_lines.append("2. Launch gemini1.py for identification")
            
        else:  # structural
            structural_method = self.structural_method_var.get()
            light_source = self.light_source_var.get()
            
            info_lines.append("‚úÖ Step 1: Structural Analysis")
            info_lines.append(f"‚úÖ Step 2: {self.structural_methods[structural_method][0]}")
            info_lines.append(f"‚úÖ Step 3: {self.light_sources[light_source][0]}")
            
            # Get file info
            file_config = self.file_mappings["structural"][structural_method][light_source]
            paths = file_config["paths"]
            analyzer_name = file_config["name"]
            
            # Check if file exists
            found_file = self.find_file_from_paths(paths)
            file_status = "‚úÖ FOUND" if found_file else "‚ùå MISSING"
            
            info_lines.append(f"‚Üí Will launch: {analyzer_name}")
            info_lines.append(f"‚Üí File Status: {file_status}")
            if found_file:
                info_lines.append(f"‚Üí Location: {found_file}")
            
            info_lines.append("")
            info_lines.append("DESCRIPTION:")
            
            if structural_method == "manual":
                info_lines.append("‚Ä¢ Interactive point-and-click marking")
                info_lines.append("‚Ä¢ Manual control over all features")
                info_lines.append("‚Ä¢ Zoom, undo, persistent mode tools")
            else:
                info_lines.append("‚Ä¢ Computational feature detection")
                info_lines.append("‚Ä¢ Advanced algorithmic analysis")  
                info_lines.append("‚Ä¢ Automated baseline, peaks, mounds")
            
            light_descriptions = {
                "bh": "‚Ä¢ Broad absorption features and mounds\n‚Ä¢ General mineral identification\n‚Ä¢ Wide wavelength range analysis",
                "l": "‚Ä¢ High-resolution sharp features\n‚Ä¢ Natural vs synthetic detection\n‚Ä¢ Precision wavelength analysis",
                "u": "‚Ä¢ Electronic transitions and color centers\n‚Ä¢ UV range spectral analysis\n‚Ä¢ Sharp peak identification"
            }
            info_lines.append("")
            info_lines.append("LIGHT SOURCE SPECIALTY:")
            info_lines.append(light_descriptions[light_source])
            
            if HAS_PATH_CONFIG:
                raw_files = gemini_paths.get_raw_data_files()
                info_lines.append("")
                info_lines.append("DATA STATUS:")
                info_lines.append(f"‚Ä¢ Raw data directory: {len(raw_files)} files found")
                info_lines.append(f"‚Ä¢ Location: {gemini_paths.raw_data}")
        
        self.info_text.insert(1.0, "\n".join(info_lines))
        self.info_text.config(state='disabled')
        
        # Update launch button text
        if primary_choice == "numerical":
            self.launch_btn.config(text="üöÄ LAUNCH GEMINI1.PY")
        else:
            method_name = self.structural_methods[self.structural_method_var.get()][0]
            light_name = self.light_sources[self.light_source_var.get()][0].split()[0]  # Get B/H, L, or U
            self.launch_btn.config(text=f"üöÄ LAUNCH {method_name.upper()} {light_name}")
    
    def find_file_from_paths(self, paths):
        """IMPROVED: Find file from list of possible paths with better debugging"""
        print(f"\nüîç SEARCHING FOR FILE:")
        print(f"Script directory: {self.script_dir}")
        
        all_paths_to_try = []
        
        for path_str in paths:
            # Try multiple resolution methods
            candidates = [
                Path(path_str),  # Absolute path
                self.script_dir / path_str,  # Relative to script dir
                self.script_dir.parent / path_str,  # Relative to parent
                Path.cwd() / path_str,  # Relative to current working directory
            ]
            all_paths_to_try.extend(candidates)
        
        # Remove duplicates while preserving order
        seen = set()
        unique_paths = []
        for path in all_paths_to_try:
            path_str = str(path)
            if path_str not in seen:
                seen.add(path_str)
                unique_paths.append(path)
        
        print(f"Trying {len(unique_paths)} possible locations:")
        for i, path in enumerate(unique_paths):
            exists = path.exists()
            print(f"  {i+1:2d}. {'‚úÖ' if exists else '‚ùå'} {path}")
            if exists and path.is_file():
                print(f"üéØ FOUND: {path}")
                return path
        
        print("‚ùå File not found in any location")
        return None
    
    def launch_analyzer(self):
        """Launch the appropriate analyzer based on workflow selections"""
        primary_choice = self.primary_var.get()
        
        if primary_choice == "numerical":
            # Launch gemini1.py directly
            paths = self.file_mappings["numerical"]["paths"]
            name = self.file_mappings["numerical"]["name"]
            found_file = self.find_file_from_paths(paths)
            
            if not found_file:
                self.show_file_not_found_dialog(name, paths)
                return
            
            self.run_analyzer(str(found_file), name)
            
        else:  # structural
            structural_method = self.structural_method_var.get()
            light_source = self.light_source_var.get()
            
            file_config = self.file_mappings["structural"][structural_method][light_source]
            paths = file_config["paths"]
            analyzer_name = file_config["name"]
            
            found_file = self.find_file_from_paths(paths)
            
            if not found_file:
                self.show_file_not_found_dialog(analyzer_name, paths)
                return
            
            self.run_analyzer(str(found_file), analyzer_name)
    
    def show_file_not_found_dialog(self, analyzer_name, searched_paths):
        """Show detailed file not found dialog"""
        error_msg = f"Could not find {analyzer_name}\n\n"
        error_msg += "Searched the following locations:\n"
        
        for i, path in enumerate(searched_paths[:5]):  # Show first 5 paths
            resolved_path = self.script_dir / path
            error_msg += f"{i+1}. {resolved_path}\n"
        
        if len(searched_paths) > 5:
            error_msg += f"... and {len(searched_paths) - 5} more locations\n"
            
        error_msg += f"\nCurrent directory: {self.script_dir}\n"
        error_msg += "\nüí° TIP: Use 'Browse Files' button to locate files manually"
        
        messagebox.showerror("File Not Found", error_msg)
    
    def run_analyzer(self, analyzer_file, analyzer_name):
        """Run the selected analyzer"""
        try:
            analyzer_path = Path(analyzer_file)
            print(f"\nüöÄ LAUNCHING ANALYZER:")
            print(f"Name: {analyzer_name}")
            print(f"File: {analyzer_path}")
            print(f"Exists: {analyzer_path.exists()}")
            print(f"Is file: {analyzer_path.is_file()}")
            
            if not analyzer_path.exists():
                raise FileNotFoundError(f"File does not exist: {analyzer_path}")
            
            working_dir = str(analyzer_path.parent)
            print(f"Working directory: {working_dir}")
            
            # Use absolute path to avoid path resolution issues
            cmd = [sys.executable, str(analyzer_path.absolute())]
            print(f"Command: {' '.join(cmd)}")
            
            if sys.platform == 'win32':
                process = subprocess.Popen(cmd, 
                                         cwd=working_dir,
                                         creationflags=subprocess.CREATE_NEW_CONSOLE)
            else:
                process = subprocess.Popen(cmd, 
                                         cwd=working_dir,
                                         preexec_fn=os.setsid if hasattr(os, 'setsid') else None)
            
            print(f"‚úÖ {analyzer_name} started (PID: {process.pid})")
            
            # Show success message with data path info
            success_msg = f"‚úÖ {analyzer_name} started successfully!\n\n"
            success_msg += f"PID: {process.pid}\n"
            success_msg += f"Location: {analyzer_path}\n"
            success_msg += f"Working Dir: {working_dir}\n"
            
            if HAS_PATH_CONFIG:
                raw_files = gemini_paths.get_raw_data_files()
                success_msg += f"\nüìÇ Data Status:\n"
                success_msg += f"Raw data files: {len(raw_files)}\n"
                success_msg += f"Data location: {gemini_paths.raw_data}"
            
            messagebox.showinfo("Analyzer Launched", success_msg)
            
            self.root.after(3000, self.minimize_launcher)
            
        except Exception as e:
            error_msg = f"Error launching {analyzer_name}:\n\n{str(e)}\n\n"
            error_msg += f"File: {analyzer_file}\n"
            error_msg += f"Working Dir: {working_dir if 'working_dir' in locals() else 'Unknown'}"
            
            messagebox.showerror("Launch Error", error_msg)
            print(f"‚ùå Launch Error: {e}")
    
    def minimize_launcher(self):
        """Minimize launcher after launch"""
        self.root.iconify()
        print("üì± Launcher minimized - restore to launch another analyzer")
    
    def browse_files(self):
        """Open file browser to current directory"""
        try:
            if sys.platform == 'win32':
                os.startfile(str(self.script_dir))
            elif sys.platform == 'darwin':  # macOS
                subprocess.run(['open', str(self.script_dir)])
            else:  # Linux
                subprocess.run(['xdg-open', str(self.script_dir)])
                
            print(f"üìÇ Opened file browser to: {self.script_dir}")
        except Exception as e:
            print(f"Error opening file browser: {e}")
    
    def reset_selections(self):
        """Reset all selections to defaults"""
        self.primary_var.set("numerical")
        self.structural_method_var.set("auto")  
        self.light_source_var.set("bh")
        self.update_workflow()
        print("üîÑ Reset to default selections")
    
    def show_help(self):
        """Show workflow help - RESTORED COMPREHENSIVE HELP"""
        help_text = """GEMINI ANALYZER LOGICAL WORKFLOW HELP - FULL FUNCTIONALITY

üîß ENHANCED FEATURES:
‚Ä¢ Automatic data path detection and configuration
‚Ä¢ Improved file search with multiple fallback locations
‚Ä¢ Better error messages with detailed path information
‚Ä¢ Integration with project data directory structure

üìã LOGICAL WORKFLOW GUIDE:

STEP 1: CHOOSE ANALYSIS TYPE

üî¢ NUMERICAL ANALYSIS:
‚Ä¢ Direct gem identification using gemini1.py
‚Ä¢ No additional selections needed
‚Ä¢ Converts raw spectra to unknown format
‚Ä¢ Compares against reference database
‚Ä¢ Provides ranked gem matches with confidence scores

üî¨ STRUCTURAL ANALYSIS: 
‚Ä¢ Feature detection and marking
‚Ä¢ Requires Steps 2 & 3 (method and light source)

STEP 2: STRUCTURAL METHOD (only for structural)

üéØ MANUAL MARKING:
‚Ä¢ Interactive point-and-click analysis
‚Ä¢ Full control over feature identification
‚Ä¢ Uses gemini_*_analyzer.py files
‚Ä¢ Zoom, undo, persistent mode capabilities

ü§ñ AUTOMATED DETECTION:
‚Ä¢ Computational feature detection
‚Ä¢ Uses *_spectra_auto_detector.py or gemini_peak_detector.py
‚Ä¢ Advanced algorithmic analysis
‚Ä¢ Automated baseline correction, peak finding

STEP 3: LIGHT SOURCE (only for structural)

üî• B/H (HALOGEN): 
‚Ä¢ Broad absorption features and mounds
‚Ä¢ General mineral identification
‚Ä¢ Wide wavelength range analysis
‚Ä¢ Plateau detection capabilities

‚ö° L (LASER): 
‚Ä¢ High-resolution sharp features
‚Ä¢ Natural vs synthetic detection
‚Ä¢ Precision wavelength analysis
‚Ä¢ Fine structure identification

üü£ U (UV): 
‚Ä¢ Electronic transitions and color centers
‚Ä¢ UV range spectral analysis
‚Ä¢ Sharp peak identification
‚Ä¢ Color center analysis

üìÇ FILE MAPPINGS & DATA PATHS:

NUMERICAL ANALYSIS:
‚Ä¢ Launches: gemini1.py
‚Ä¢ Data source: ../numerical_analysis/raw_txt/ 
‚Ä¢ Or configured data/raw/ directory

STRUCTURAL ANALYSIS:
Manual B/H ‚Üí gemini_halogen_analyzer.py
Manual L ‚Üí gemini_laser_analyzer.py  
Manual U ‚Üí gemini_uv_analyzer.py
Auto B/H ‚Üí b_spectra_auto_detector.py
Auto L ‚Üí l_spectra_auto_detector.py
Auto U ‚Üí gemini_peak_detector.py

üóÇÔ∏è PROJECT STRUCTURE:
gemini_gemological_analysis/
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îú‚îÄ‚îÄ raw/          (input spectral files)
‚îÇ   ‚îú‚îÄ‚îÄ processed/    (intermediate results)
‚îÇ   ‚îî‚îÄ‚îÄ output/       (final analysis results)
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ numerical_analysis/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ gemini1.py
‚îÇ   ‚îî‚îÄ‚îÄ structural_analysis/
‚îÇ       ‚îú‚îÄ‚îÄ gemini_launcher.py (this launcher)
‚îÇ       ‚îú‚îÄ‚îÄ manual_analyzers/
‚îÇ       ‚îî‚îÄ‚îÄ auto_analysis/
‚îî‚îÄ‚îÄ main.py

üí° WORKFLOW EXAMPLES:

üî¢ For Gem Identification:
1. Select "Numerical Analysis"
2. Click "Launch" ‚Üí opens gemini1.py
3. gemini1.py finds data in configured raw data directory

üéØ For Manual Halogen Analysis:  
1. Select "Structural Analysis"
2. Select "Manual Marking"
3. Select "B/H (Halogen)"
4. Click "Launch" ‚Üí opens manual halogen analyzer
5. Analyzer loads data from configured data directory

ü§ñ For Auto UV Analysis:
1. Select "Structural Analysis" 
2. Select "Automated Detection"
3. Select "U (UV)"
4. Click "Launch" ‚Üí opens UV peak detector
5. Automated algorithms process spectral data

üîß TROUBLESHOOTING:

‚ùå File Not Found:
‚Ä¢ Check file structure matches expected layout
‚Ä¢ Use "Browse Files" to explore directories
‚Ä¢ Verify files exist in searched locations
‚Ä¢ Check Configuration Summary for file status

üìÇ Data Path Issues:
‚Ä¢ Ensure data files are in data/raw/ directory
‚Ä¢ Check data path configuration status in title bar
‚Ä¢ Raw data file count shown in configuration
‚Ä¢ Use data_path_config.py for path setup

üöÄ LAUNCHING:
‚Ä¢ Green button launches selected analyzer
‚Ä¢ Success message shows PID and file paths
‚Ä¢ Data directory status included in launch info
‚Ä¢ Launcher minimizes after successful launch
‚Ä¢ Restore window to launch additional analyzers

üîÑ RESET & NAVIGATION:
‚Ä¢ Reset button returns to default selections
‚Ä¢ Browse Files opens current directory
‚Ä¢ Help button shows this comprehensive guide
‚Ä¢ Exit button closes launcher

üìä DATA INTEGRATION:
‚Ä¢ Automatic detection of raw data files
‚Ä¢ Configuration summary shows file counts
‚Ä¢ Path resolution works across different project layouts
‚Ä¢ Seamless integration between launcher and analyzers"""
        
        help_window = tk.Toplevel(self.root)
        help_window.title("Comprehensive Workflow Help")
        help_window.geometry("850x750")
        help_window.resizable(True, True)
        
        text_frame = tk.Frame(help_window)
        text_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        help_text_widget = tk.Text(text_frame, font=('Arial', 9), wrap='word')
        scrollbar = tk.Scrollbar(text_frame, command=help_text_widget.yview)
        help_text_widget.config(yscrollcommand=scrollbar.set)
        
        help_text_widget.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        help_text_widget.insert(1.0, help_text)
        help_text_widget.config(state='disabled')
        
        tk.Button(help_window, text="Close", command=help_window.destroy).pack(pady=10)
    
    def run(self):
        """Start the launcher"""
        print("üöÄ Starting Full-Featured Gemini Launcher...")
        print(f"Python executable: {sys.executable}")
        print(f"Platform: {sys.platform}")
        if HAS_PATH_CONFIG:
            print(f"‚úÖ Data path configuration active")
        else:
            print(f"‚ö†Ô∏è  Manual path resolution mode")
        self.root.mainloop()

def main():
    """Main function"""
    try:
        launcher = GeminiLauncher()
        launcher.run()
    except Exception as e:
        print(f"‚ùå Launcher error: {e}")
        messagebox.showerror("Error", f"Launcher error: {e}")

if __name__ == '__main__':
    main()
